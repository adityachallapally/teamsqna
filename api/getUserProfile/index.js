// module.exports = async function (context, req) {
//     context.log('JavaScript HTTP trigger function processed a request.');

//     const name = (req.query.name || (req.body && req.body.name));
//     const responseMessage = name
//         ? "Hello, " + name + ". This HTTP triggered function executed successfully."
//         : "This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.";

//     context.res = {
//         // status: 200, /* Defaults to 200 */
//         body: responseMessage
//     };
// }

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const {
    TeamsFx,
    getTediousConnectionConfig,
    OnBehalfOfUserCredential,
    createMicrosoftGraphClient,
    loadConfiguration
} = require("@microsoft/teamsfx");
const { Connection, Request } = require('tedious');
const config = require("../config");

const oboAuthConfig = {
    authorityHost: config.authorityHost,
    clientId: config.clientId,
    tenantId: config.tenantId,
    clientSecret: config.clientSecret,
};

/**
 * This function handles requests sent from teamsfx client SDK.
 * The HTTP request should contain an SSO token in the header and any content in the body.
 * The SSO token should be queried from Teams client by teamsfx client SDK.
 * Before trigger this function, teamsfx binding would process the SSO token and generate teamsfx configuration.
 *
 * This function initializes the teamsfx Server SDK with the configuration and calls these APIs:
 * - getUserInfo() - Get the user's information from the received SSO token.
 * - getMicrosoftGraphClientWithUserIdentity() - Get a graph client to access user's Microsoft 365 data.
 *
 * The response contains multiple message blocks constructed into a JSON object, including:
 * - An echo of the request body.
 * - The display name encoded in the SSO token.
 * - Current user's Microsoft 365 profile if the user has consented.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxConfig} config - The teamsfx configuration generated by teamsfx binding.
 */
module.exports = async function (context, req, config) {
    const res = {
        status: 200,
        body: {},
    };

    try {
        const method = req.method.toLowerCase();
        const accessToken = config.AccessToken;

        const oboCredential = new OnBehalfOfUserCredential(accessToken, oboAuthConfig);
        const graphClient = createMicrosoftGraphClient(oboCredential, ["User.Read", "TeamsAppInstallation.ReadForUser"]);
        // Get the user info from access token
        const currentUser = await oboCredential.getUserInfo();
        const objectId = currentUser.objectId;
        let teamId = "fad80d73-a674-4058-878b-6c121c02d18a";
        let channelId = "19:3a3e1b9864704abdb41e3043cf4c72e7@thread.tacv2";

        const channel_messages = await graphClient.api(`teams/${teamId}/channels/${channelId}/messages`).get();


        const resultArray = [];
        const userInfoMessages = channel_messages;
        const messageCount = Object.keys(userInfoMessages).length;

        const userInfoMessagesArray = userInfoMessages.value;
        for (let i = 0; i < userInfoMessagesArray.length; i++) {
            const message = userInfoMessagesArray[i];
            if (message.body && message.body.content === "<systemEventMessage/>") {
                continue; // Skip this message
            }
            const id = message.id;
            let body = message.body.content.replace(/<\/?div>/g, "");

            //replies = await getReplies(id, teamId, channelId);
            let replies = "";

            let replies_messages = await graphClient.api(`teams/${teamId}/channels/${channelId}/messages/${id}/replies`).get();

            const replies_messagesArray = replies_messages.value;

            for (let i = 0; i < replies_messagesArray.length; i++) {
                const message = replies_messagesArray[i];
                if (message.body && message.body.content === "<systemEventMessage/>") {
                    continue; // Skip this message
                }

                let body = message.body.content.replace(/<\/?div>/g, "");
                replies = body + replies + ",";
            }
            let body_and_replies = replies + body;
            resultArray.push(body_and_replies);
        }

        if (true) {
            res.body = resultArray;

        } else {
            res.body.userInfoMessage = "No user information was found in access token.";
        }
        return res;
    }
    catch (err) {
        return {
            status: 500,
            body: {
                error: err.message
            }
        }
    }
}

async function getReplies(id, teamId, channelId) {
    const accessToken = config.AccessToken;
    const oboCredential = new OnBehalfOfUserCredential(accessToken, oboAuthConfig);
    const graphClient = createMicrosoftGraphClient(oboCredential, ["User.Read"]);

    let replies = "";

    let replies_messages = await graphClient.api(`teams/${teamId}/channels/${channelId}/messages/${id}/replies`).get();

    const replies_messagesArray = replies_messages.value;

    for (let i = 0; i < replies_messagesArray.length; i++) {
        const message = replies_messagesArray[i];
        if (message.body && message.body.content === "<systemEventMessage/>") {
            continue; // Skip this message
        }

        let body = message.body.content.replace(/<\/?div>/g, "");
        replies = replies + body + ",";
    }
    return replies;
}


